Index: LoR.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># import pandas as pd\r\n# import numpy as np\r\n# from ast import literal_eval\r\n# from sklearn.model_selection import train_test_split\r\n# from sklearn.linear_model import LogisticRegression\r\n# from sklearn.metrics import accuracy_score, classification_report\r\n#\r\n# # Load the Excel file\r\n# file_path = \"with_prediction_good.xlsx\"  # Change this to your file path\r\n# df = pd.read_excel(file_path)\r\n#\r\n# # Convert the \"sbert embedding\" column from string to actual list\r\n# df[\"sbert embedding string\"] = df[\"sbert_embedded\"].apply(literal_eval)\r\n#\r\n# # Convert the list embeddings into a NumPy array\r\n# X = np.array(df[\"sbert embedding string\"].tolist())\r\n#\r\n# # Extract encoded labels\r\n# y = df[\"label encoded\"].values  # Change \"encoded label\" to the actual column name\r\n#\r\n# # Split data into training and testing sets\r\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n#\r\n# # Train Logistic Regression model\r\n# model = LogisticRegression(max_iter=1000)\r\n# model.fit(X_train, y_train)\r\n#\r\n# # Predict on test data\r\n# y_pred = model.predict(X_test)\r\n#\r\n# # Evaluate the model\r\n# accuracy = accuracy_score(y_test, y_pred)\r\n# print(f\"Accuracy: {accuracy:.4f}\")\r\n# print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\r\n\r\n#\r\n# import pandas as pd\r\n# import numpy as np\r\n# from ast import literal_eval\r\n# from sklearn.model_selection import train_test_split\r\n# from sklearn.linear_model import LogisticRegression\r\n# from sklearn.metrics import accuracy_score, classification_report\r\n#\r\n# # Load the Excel file\r\n# file_path = \"with_prediction_good.xlsx\"  # Change this to your file path\r\n# df = pd.read_excel(file_path)\r\n#\r\n# # Convert the \"sbert embedding\" column from string to actual list\r\n# df[\"sbert embedding string\"] = df[\"sbert_embedded\"].apply(literal_eval)\r\n#\r\n# # Convert the list embeddings into a NumPy array\r\n# X = np.array(df[\"sbert embedding string\"].tolist())\r\n#\r\n# # Extract encoded labels\r\n# y = df[\"label encoded\"].values  # Change \"label encoded\" to the actual column name\r\n#\r\n# # Split data into training and testing sets\r\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n#\r\n# # Train Logistic Regression model\r\n# model = LogisticRegression(max_iter=1000)\r\n# model.fit(X_train, y_train)\r\n#\r\n# # Predict on test data\r\n# y_pred = model.predict(X_test)\r\n# y_pred_prob = model.predict_proba(X_test)  # Get probability scores\r\n#\r\n# # Evaluate the model\r\n# accuracy = accuracy_score(y_test, y_pred)\r\n# print(f\"Accuracy: {accuracy:.4f}\")\r\n# print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\r\n#\r\n# # Add predictions and probabilities back to the DataFrame\r\n# df.loc[df.index[y_test.index], \"logreg_prediction\"] = y_pred\r\n# df.loc[df.index[y_test.index], \"logreg_prediction_score\"] = y_pred_prob.max(axis=1)  # Highest probability for each prediction\r\n#\r\n# # Save the updated DataFrame back to Excel\r\n# output_file = \"with_predictions_updated.xlsx\"\r\n# df.to_excel(output_file, index=False)\r\n#\r\n# print(f\"Predictions saved to {output_file}\")\r\n\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom ast import literal_eval\r\nfrom sklearn.model_selection import cross_val_predict, StratifiedKFold\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.metrics import accuracy_score, classification_report\r\n\r\n# Load the Excel file\r\nfile_path = \"with_prediction_good.xlsx\"  # Change to your actual file path\r\ndf = pd.read_excel(file_path)\r\n\r\n# Convert the \"sbert embedding\" column from string to actual list\r\ndf[\"sbert embedding string\"] = df[\"sbert_embedded\"].apply(literal_eval)\r\n\r\n# Convert embeddings to NumPy array\r\nX = np.array(df[\"sbert embedding string\"].tolist())\r\n\r\n# Extract labels\r\ny = df[\"label encoded\"].values\r\n\r\n# Define the Logistic Regression model\r\nmodel = LogisticRegression(max_iter=1000)\r\n\r\n# Set up 10-Fold Cross-Validation\r\ncv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\r\n\r\n# Perform 10-Fold Cross-Validation to get predictions\r\ny_pred = cross_val_predict(model, X, y, cv=cv, method=\"predict\")\r\ny_pred_prob = cross_val_predict(model, X, y, cv=cv, method=\"predict_proba\")\r\n\r\n# Evaluate the model\r\naccuracy = accuracy_score(y, y_pred)\r\nprint(f\"Cross-Validation Accuracy: {accuracy:.4f}\")\r\nprint(\"Classification Report:\\n\", classification_report(y, y_pred))\r\n\r\n# Add predictions and probabilities back to the DataFrame\r\ndf[\"logreg_prediction\"] = y_pred\r\ndf[\"logreg_prediction_score\"] = y_pred_prob.max(axis=1)  # Highest probability for each prediction\r\n\r\n# Save the updated DataFrame to the same file\r\ndf.to_excel(file_path, index=False, engine=\"openpyxl\")\r\n\r\nprint(f\"Predictions saved to {file_path}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LoR.py b/LoR.py
--- a/LoR.py	(revision 2de5147ae7d381e5ce61d0ca135cbe48b7b418ba)
+++ b/LoR.py	(date 1739130139906)
@@ -1,39 +1,4 @@
-# import pandas as pd
-# import numpy as np
-# from ast import literal_eval
-# from sklearn.model_selection import train_test_split
-# from sklearn.linear_model import LogisticRegression
-# from sklearn.metrics import accuracy_score, classification_report
-#
-# # Load the Excel file
-# file_path = "with_prediction_good.xlsx"  # Change this to your file path
-# df = pd.read_excel(file_path)
-#
-# # Convert the "sbert embedding" column from string to actual list
-# df["sbert embedding string"] = df["sbert_embedded"].apply(literal_eval)
-#
-# # Convert the list embeddings into a NumPy array
-# X = np.array(df["sbert embedding string"].tolist())
-#
-# # Extract encoded labels
-# y = df["label encoded"].values  # Change "encoded label" to the actual column name
-#
-# # Split data into training and testing sets
-# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
-#
-# # Train Logistic Regression model
-# model = LogisticRegression(max_iter=1000)
-# model.fit(X_train, y_train)
-#
-# # Predict on test data
-# y_pred = model.predict(X_test)
-#
-# # Evaluate the model
-# accuracy = accuracy_score(y_test, y_pred)
-# print(f"Accuracy: {accuracy:.4f}")
-# print("Classification Report:\n", classification_report(y_test, y_pred))
-
-#
+
 # import pandas as pd
 # import numpy as np
 # from ast import literal_eval
@@ -89,14 +54,15 @@
 from sklearn.metrics import accuracy_score, classification_report
 
 # Load the Excel file
-file_path = "with_prediction_good.xlsx"  # Change to your actual file path
+#file_path = "with_prediction_good.xlsx"
+file_path = "BERT_file.xlsx"
 df = pd.read_excel(file_path)
 
 # Convert the "sbert embedding" column from string to actual list
-df["sbert embedding string"] = df["sbert_embedded"].apply(literal_eval)
-
+df["sBert_embedding_string"] = df["sbert_embedded"].apply(literal_eval)
+#df["bert_embedding_string"] = df["bert_embedded"].apply(literal_eval)
 # Convert embeddings to NumPy array
-X = np.array(df["sbert embedding string"].tolist())
+X = np.array(df["sBert_embedding_string"].tolist())
 
 # Extract labels
 y = df["label encoded"].values
@@ -117,8 +83,8 @@
 print("Classification Report:\n", classification_report(y, y_pred))
 
 # Add predictions and probabilities back to the DataFrame
-df["logreg_prediction"] = y_pred
-df["logreg_prediction_score"] = y_pred_prob.max(axis=1)  # Highest probability for each prediction
+df["sBert_logreg_prediction"] = y_pred
+df["sBert_logreg_prediction_score"] = y_pred_prob.max(axis=1)  # Highest probability for each prediction
 
 # Save the updated DataFrame to the same file
 df.to_excel(file_path, index=False, engine="openpyxl")
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1738874680157)
+++ b/.idea/modules.xml	(date 1738874680157)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/IR_Bonus.iml" filepath="$PROJECT_DIR$/.idea/IR_Bonus.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/IR_Bonus.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/IR_Bonus.iml b/.idea/IR_Bonus.iml
new file mode 100644
--- /dev/null	(date 1738874680094)
+++ b/.idea/IR_Bonus.iml	(date 1738874680094)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.12 (IR_Bonus) (2)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1738874680142)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1738874680142)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1738874680142)
+++ b/.idea/vcs.xml	(date 1738874680142)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1738874680174)
+++ b/.idea/misc.xml	(date 1738874680174)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (IR_Bonus) (2)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1738874680126)
+++ b/.idea/.gitignore	(date 1738874680126)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1738874680110)
+++ b/.idea/.name	(date 1738874680110)
@@ -0,0 +1,1 @@
+find_sentences.py
\ No newline at end of file
